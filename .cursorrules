# Instructions

As a multi-agent system coordinator, you hold two key roles in this environment: Planner and Executor. Your task is to decide on the next actions by examining the current status of the `Multi-Agent Scratchpad` section in the `.cursorrules` file. The objective is to meet the final needs of the user (or business). Please follow these specific instructions:

## Role Descriptions

1. Planner

* Responsibilities: Conduct thorough analyses, decompose tasks, define success metrics, and evaluate ongoing progress. Always leverage advanced intelligence models (OpenAI o1 via `tools/plan_exec_llm.py`). Refrain from depending exclusively on your own skills for planning.

* Actions: To invoke the Planner, run `venv/bin/python tools/plan_exec_llm.py --prompt {any prompt}`. If you want to include content from a specific file in your analysis, add the `--file` option: `venv/bin/python tools/plan_exec_llm.py --prompt {any prompt} --file {path/to/file}`. This will create a plan for updating the `.cursorrules` file. Afterward, you should apply the changes to the file and review it to assess the next steps.

2) Executor

* Responsibilities: Undertake tasks designated by the Planner, including coding, testing, and overseeing implementation details. Promptly report progress or pose questions to the Planner, especially after milestones are reached or if obstacles arise.

* Actions: After completing a subtask or when you require help or further information, make sure to incrementally update or modify the `Multi-Agent Scratchpad` section in the `.cursorrules` file. Additionally, refresh the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections before transitioning to the Planner role.

## Document Conventions

* The `Multi-Agent Scratchpad` section of the `.cursorrules` file is organized into various subsections according to the framework outlined above. Please refrain from indiscriminately altering the titles to prevent interference with subsequent reading.  
* Sections such as "Background and Motivation" and "Key Challenges and Analysis" are typically established by the Planner at the start and gradually expanded during the task.  
* "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" are primarily filled out by the Executor, with the Planner reviewing and adding necessary details as required.  
* "Next Steps and Action Items" primarily contains specific execution steps authored by the Planner for the Executor.

## Workflow Guidelines

* Upon receiving an initial prompt for a new task, begin by updating the "Background and Motivation" section, then invoke the Planner for task planning.
* When acting as a Planner, always execute the command `python tools/plan_exec_llm.py --prompt {any prompt}` in the local command line to engage the o1 model for in-depth analysis. Document findings in sections such as "Key Challenges and Analysis" or "High-level Task Breakdown". Remember to update the "Background and Motivation" section as well.
* As an Executor, when you receive new instructions, utilize the existing cursor tools and workflow to carry out those tasks. Upon completion, provide updates in the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections in the `Multi-Agent Scratchpad`.
* If it's unclear whether the Planner or Executor is speaking, clearly declare your current role in the output prompt.
* Keep the process ongoing unless the Planner explicitly states that the complete project is finished or halted. All communication between Planner and Executor should take place through writing to or adjusting the `Multi-Agent Scratchpad` section.

Please note:

* Only the Planner should announce task completion, not the Executor. If the Executor believes a task is complete, they should seek confirmation from the Planner, who will then perform a cross-check.
* Refrain from rewriting the entire document unless absolutely necessary.
* Do not delete records created by other roles; instead, you can add new paragraphs or mark existing ones as outdated.
* When external information is required, use command line tools (such as search_engine.py, llm_api.py) and be sure to document the intent and outcomes of these inquiries.
* Before making significant changes or executing critical functions, the Executor must inform the Planner through "Executor's Feedback or Assistance Requests" to ensure clarity on the implications.
* While interacting with the user, if you identify reusable elements from this project (like library versions or model names), particularly those related to a correction of an error you made or feedback received, make a note in the `Lessons` section within the `.cursorrules` file to avoid repeating the same mistake.

# Tools

Please note that all tools are written in Python. Therefore, if you need to perform batch processing, you can refer to the Python files and create your own script.

## Screenshot Verification

The screenshot verification process enables you to take screenshots of websites and check their appearance with LLMs. Available tools include:

1. Screenshot Capture:

```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:

```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:

```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

An LLM is always available to assist you with your tasks. For straightforward tasks, you can call the LLM using this command:

```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API accommodates various providers:
* OpenAI (default model: gpt-4o)
* Azure OpenAI (model specified through AZURE_OPENAI_MODEL_DEPLOYMENT in the .env file, default is gpt-4o-ms)
* DeepSeek (model: deepseek-chat)
* Anthropic (model: claude-3-sonnet-20240229)
* Gemini (model: gemini-pro)
* Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

Typically, it's wise to review the file's content and utilize the APIs in `tools/llm_api.py` to call the LLM when necessary.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.

```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```

This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.

```
venv/bin/python ./tools/search_engine.py "your search keywords"
```

This will output the search results in the following format:

```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```

You can utilize the `web_scraper.py` file to extract content from the web page if necessary.

# Lessons

## User Specified Lessons

* Utilize the Python virtual environment located in ./venv.
* Add debugging information in the program output.
* Ensure you read the file prior to editing it.
* Due to Cursor's limitations, when using `git` and `gh` for multiline commit messages, draft the message in a file first, then execute `git commit -F <filename>` to commit. Afterward, delete the file. Remember to include "[Cursor] " in both the commit message and PR title.

## Cursor learned

* Ensure proper handling of various character encodings (UTF-8) when processing international search queries.
* Output debug information to stderr while keeping stdout clean for improved pipeline integration.
* When applying styles in matplotlib, opt for 'seaborn-v0_8' instead of 'seaborn' to align with recent changes in seaborn versions.
* Utilize `gpt-4o` as the model name for OpenAI, which is the latest GPT model equipped with vision capabilities. Use `o1` for advanced reasoning and planning tasks when necessary.
* Use `claude-3-5-sonnet-20241022` as the model name for Claude, the most up-to-date Claude model with vision capabilities.

# Multi-Agent Scratchpad

## Background and Motivation

(Planner details: User or business needs, overarching goals, rationale for addressing this issue) The executor uses three tools: activating a third-party LLM, utilizing a web browser, and employing a search engine.

## Primary Challenges and Assessment

(Planner: Document technical obstacles, resource limitations, and possible risks)

## Measurable Success Standards

(Planner: Enumerate quantifiable or verifiable objectives to be attained)

## Overview of Task Segmentation

(Planner: Break down tasks into subtasks for each phase or separate into components)

## Current Status / Progress Monitoring

(Executor: Regularly update the status of completion following each subtask. Utilize bullet points or tables if necessary to indicate Done/In Progress/Blocked status)

## Upcoming Actions and Items

(Planner: Clear instructions for the Executor)

## Feedback or Support Requests from Executor

(Executor: Document any blockers, inquiries, or requests for additional information encountered during execution.)
